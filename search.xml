<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Hello]]></title>
    <url>%2Fpost%2FHello%2F</url>
    <content type="text"></content>
  </entry>
  <entry>
    <title><![CDATA[关于质数]]></title>
    <url>%2Fpost%2F%E8%B4%A8%E6%95%B0%E2%80%94%E2%80%94Prime%2F</url>
    <content type="text"><![CDATA[质数的定义： 若一个正整数无法被除了被除了1和它自身之外的任何自然数整除，则称该数为质数（素数），否则则称该正整数为合数。 在整个自然数集合中，质数的数量不多，分布比较稀疏，对于一个足够大的整数 $ N $ 不超过 $ N $ 的质数大约有 $ N /ln N $ 个，即每 $ \ln N $ 个数中大约有一个质数。 质数的判定试除法 若一个正整数 $ N $ 为合数，则存在一个能整除 $ N $ 的数 $ T $ ，其中 $ 2 \le T \le \sqrt(N) $ 。 证明： 由定义得，因为 N 是合数，所以存在一个能整除 $ N $ 的数 $ M $ ，其中 $ 2 \le M \le N - 1 $ 反证法,假设命题不成立，那么这样的数 $ M $ 一定满足 $ \sqrt(N) + 1 \le M \le N - 1 $ 。 因为 $ M $ 能整除 $ N $ ， 所以它们的商 $ N/M $ 也能整除 $ N $ 。 而 $ 2 \le N/M \le \sqrt(N) $ ，令 $ T = N/M $ ，这与假设矛盾。故假设不成立，原命题成立。 证毕 根据上述命题，我们只需要扫描 $ 2 ~ \sqrt(N) $ 之间的所有整数，依次检查它们是否能整除 $ N $ ，若都不能整除，则 $ N $ 为质数，否则 $ N $ 为合数。试除法的时间复杂度为 $ O(\sqrt(N)) $ 。 1234567bool isPrime(int n)&#123; for (int i=2; i&lt;=sqrt(n); ++i) if (!(n%i)) return false; return true;&#125; “试除法”作为最简单也最经典的确定性算法，是我们在算法竞赛中通常会使用的方法。有一些效率更高的随机性算法，例如“Miller-Robbin”等，有较小的概率把合数判定为质数，但多次判定合起来的错误概率趋近与零，感兴趣的读者可以自行查阅并学习。 质数的筛选 给定一个整数 $ N $ ，求出 $ 1 ~ N $ 之间的所有质数，称为质数的筛选问题。 Eratosthenes 筛法]]></content>
      <tags>
        <tag>Number Theory</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2Fpost%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Generate static files1$ hexo g More info: Generating Deploy to remote sites1$ hexo d More info: Deployment]]></content>
      <categories>
        <category>test</category>
      </categories>
      <tags>
        <tag>test</tag>
      </tags>
  </entry>
</search>
