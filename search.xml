<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Hello]]></title>
    <url>%2Fpost%2FHello%2F</url>
    <content type="text"></content>
  </entry>
  <entry>
    <title><![CDATA[关于质数]]></title>
    <url>%2Fpost%2F%E8%B4%A8%E6%95%B0%2F</url>
    <content type="text"><![CDATA[质数的定义： 若一个正整数无法被除了被除了1和它自身之外的任何自然数整除，则称该数为质数（素数），否则则称该正整数为合数。 在整个自然数集合中，质数的数量不多，分布比较稀疏，对于一个足够大的整数 $ N $ 不超过 $ N $ 的质数大约有 $ N /ln N $ 个，即每 $ \ln N $ 个数中大约有一个质数。 质数的判定试除法 若一个正整数 $ N $ 为合数，则存在一个能整除 $ N $ 的数 $ T $ ，其中 $ 2 \le T \le \sqrt N $ 。 证明： 由定义得，因为 $ N $ 是合数，所以存在一个能整除 $ N $ 的数 $ M $ ，其中 $ 2 \le M \le N-1 $ 反证法,假设命题不成立，那么这样的数 $ M $ 一定满足 $ \sqrt N + 1 \le M \le N-1 $ 。 因为 $ M $ 能整除 $ N $ ， 所以它们的商 $ N/M $ 也能整除 $ N $ 。 而 $ 2 \le N/M \le \sqrt N $ ，令 $ T = N/M $ ，这与假设矛盾。故假设不成立，原命题成立。 证毕 根据上述命题，我们只需要扫描 $ 2 $ ~ $ \sqrt N $ 之间的所有整数，依次检查它们是否能整除 $ N $ ，若都不能整除，则 $ N $ 为质数，否则 $ N $ 为合数。试除法的时间复杂度为 $ O(\sqrt N) $ 。 1234567bool isPrime(int n)&#123; for (int i=2; i&lt;=sqrt(n); ++i) if (!(n%i)) return false; return true;&#125; “试除法”作为最简单也最经典的确定性算法，是我们在算法竞赛中通常会使用的方法。有一些效率更高的随机性算法，例如“Miller-Robbin”等，有较小的概率把合数判定为质数，但多次判定合起来的错误概率趋近与零，感兴趣的读者可以自行查阅并学习。 质数的筛选 给定一个整数 $ N $ ，求出 $ 1 $ ~ $ N $ 之间的所有质数，称为质数的筛选问题。 Eratosthenes 筛法 Eratosthenes 筛法基于这样的想法：任意整数 $ x $ 的倍数 $ 2x,3x, … $ 都不是质数。根据质数的定义，上述命题显然成立。 我们可以从 $ 2 $ 开始，由小到大扫描每个数 $ x $ ，把它的倍数 $ 2x,3x, … \lfloor N/x \rfloor * x\ $ 标记为合数。当扫描到一个数时，若它尚未被标记，则它不能被 $ 2 ~ x-1 $ 之间的任何数整除，该数就是质数。 Eratosthenes 筛法的进行过程如下： 2,3,4,5,6,7,8,9,10,11,12, … 2,3,4,5,6,7,8,9,10,11,12, … 2,3,4,5,6,7,8,9,10,11,12, … 2,3,4,5,6,7,8,9,10,11,12, … 2,3,4,5,6,7,8,9,10,11,12, … 另外，我们可以发现，$ 2 $ 和 $ 3 $ 都会把 $ 6 $ 标记为合数。实际上，小于 $ x^{2} $ 的 $ x $ 的倍数在更小的数时就已经被标记过了。因此，我们可以对 Eratosthenes 筛法进行优化，对于每个数 $ x $ ，我们只需从 $ x^{2} $ 开始，把 $ x^{2}, (x+1)*x, … , \lfloor N/x \rfloor * x\ $ 标记为合数即可。 12345678910int vis[Max_N];void SeekPrimes(int n)&#123; memset(vis,0,sizeof(vis)); for (int i=2; i&lt;=n; ++i) if (!vis[i]) for (int j=i; j&lt;=n/i; ++j) vis[i*j] = 1;&#125; Eratosthenes 筛法的时间复杂度为 $ O( \sum_{质数p \le N}{\frac{N}{p}} ) = O(N \log \log N) $ 。该算法实现简单，效率已经非常接近线性，是算法竞赛中最常用的质数筛法。 线性筛法（Euler筛） 即使在优化后，Eratosthenes 筛法任然会重复标记合数。例如 $ 12 $ 既会被 $ 2 $ 又会被 $ 3 $ 标记，在标记 $ 2 $ 倍数时， $ 12 = 6 * 2 $ ，在标记 $ 3 $ 的倍数时， $ 12 = 4 * 3 $ 。其根本原因是我们没有确定出唯一的产生 $ 12 $ 的方式。 线性筛法通过“从大到小累积质因子”的方式标记每个合数，既让 $ 12 $ 只有 $ 3 * 2 * 2 $ 一种产生方式。设数组 $ vis $ 记录每个数的最小质因子，我们照以下步骤维护 $ vis $ 。 1.依次考虑 $ 2 $ ~ $ N $ 之间的每一个数 $ i $ 。 2.若 $ vis[i] == i $ ，说明 $ i $ 是质数，把它保存下来。 3.扫描不大于 $ vis[i] $ 的每个质数 $ p $ ，令 $ vis[i*p] = p $ 。也就是在 $ i $ 的基础上累积一个质因子 $ p $ 。也就是在 $ i $ 的基础上累积一个质因子 $ p $ 。因为 $ p \le vis[i] $ ，所以 $ p $ 就是合数 $ i * p $ 的最小质因子。$$ i | 2 | 3 | :-: | :-: | :-: | p \le v[i] | 2 | 2,3 | i * p | 4 | 6,9 |$$ 每个合数 $ i * p $ 只会被它最小的质因子 $ p $ 筛一次，时间复杂度为 $ O(N) $ 。 12345678910111213141516171819int vis[Max_N],prime[Max_N];int m;void SeekPrimes(int n)&#123; memset(vis, 0, sizeof(vis)); m = 0; for (int i=2; i&lt;=n; ++i) &#123; if (!vis[i]) vis[i] = prime[++m] = i; for (int j=1; j&lt;=m; ++j) &#123; if (prime[j]&gt;vis[i] || prime[j]&gt;n/i) break; vis[i*prime[j]] = prime[j]; &#125; &#125;&#125; 质因数分解算术基本定理 任何一个大于 $ 1 $ 的正整数都能唯一的分解为有限个正质数之积，可写作：$$ N = p_{1}^{c_1} p_2^{c_2} … p_m^{c_m}$$ 其中 $ c_{i} $ 都是正整数， $ p_{i} $ 都是正质数，且满足 $ p_{1} &lt; p_{2} &lt; … p_{m} $ 。]]></content>
      <tags>
        <tag>Number Theory</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2Fpost%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Generate static files1$ hexo g More info: Generating Deploy to remote sites1$ hexo d More info: Deployment]]></content>
      <categories>
        <category>test</category>
      </categories>
      <tags>
        <tag>test</tag>
      </tags>
  </entry>
</search>
